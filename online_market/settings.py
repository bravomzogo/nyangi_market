"""
Django settings for online_market project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import dj_database_url
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv(Path(__file__).resolve().parent.parent / '.env')

# Configure PyMySQL as MySQLdb
import pymysql
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-ag66=x47=j%u626ymqp9xd*$5)f+x8dq5lwk#f*4=x$#z83uo0')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "7811-197-186-2-206.ngrok-free.app",'nyangi-market.onrender.com',  # Add your ngrok URL here
    "nyangiassetsmarketplace.co.tz"
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'django.contrib.humanize',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = 'online_market.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'myapp.context_processors.cart_item_count',
                'myapp.context_processors.pending_orders_count',
                'myapp.context_processors.active_admin_messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'online_market.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database configuration
# The application will try to use MySQL if the environment variables are set,
# otherwise it will fall back to PostgreSQL or SQLite

if os.environ.get('db_hostname') and os.environ.get('db_name') and os.environ.get('db_username') and os.environ.get('db_password'):
    # MySQL configuration using environment variables with PyMySQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('db_name'),
            'USER': os.environ.get('db_username'),
            'PASSWORD': os.environ.get('db_password'),
            'HOST': os.environ.get('db_hostname'),
            'PORT': '3306',
            'OPTIONS': {
                'charset': 'utf8mb4',
                'use_unicode': True,
                'sql_mode': 'STRICT_TRANS_TABLES',
                'autocommit': True,
            },
            'TEST': {
                'CHARSET': 'utf8mb4',
                'COLLATION': 'utf8mb4_unicode_ci',
            }
        }
    }
else:
    # Fallback to PostgreSQL configuration
    DATABASES = {
        'default': dj_database_url.parse("postgresql://manyerere201:exHjyP9UQFX0@ep-shy-mud-a5gs0r74.us-east-2.aws.neon."
                                        "tech/nyangi_market?sslmode=require")
    }
    
    # Uncomment to use SQLite for local development
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.sqlite3',
    #         'NAME': BASE_DIR / 'db.sqlite3',
    #     }
    # }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'
MEDIA_URL = '/media/'


# Development mode setup
if os.getenv("DJANGO_DEVELOPMENT", "False") == "True":
    STATICFILES_DIRS = [BASE_DIR / "static"]  # Local static files
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
else:  # Production mode setup
    STATIC_ROOT = BASE_DIR / "staticfiles"  # Static files collected here
    MEDIA_ROOT = BASE_DIR / "mediafiles"

    # WhiteNoise settings for serving static files in production
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
    



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MPESA_CONSUMER_KEY = 'fV9T4HsmyzsX1eduguSw9XOsCGO9FpxhZaxj3VmbyGq931kk'
MPESA_CONSUMER_SECRET = 'vrmWEF8DUPLcb3ApQhRwZf8yMSRX5Y53nuh2hprm4l421ijlX7vsY1hmC1RA54DH'
MPESA_SHORTCODE = '174379'
MPESA_PASSKEY = '4f3d6e7a9b4e5a7396d1b8ed9ba33f80'
MPESA_CALLBACK_URL = 'https://7811-197-186-2-206.ngrok-free.app/mpesa-callback/'


# settings.py
LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = 'home'

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# First check for specific sales email settings (for backward compatibility)
if os.environ.get('SALES_EMAIL_HOST'):
    EMAIL_HOST = os.environ.get('SALES_EMAIL_HOST')
    EMAIL_PORT = int(os.environ.get('SALES_EMAIL_PORT', 465))
    EMAIL_HOST_USER = os.environ.get('SALES_EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('SALES_EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = os.environ.get('SALES_EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_USE_SSL = os.environ.get('SALES_EMAIL_USE_SSL', 'False').lower() == 'true'
# Then try the generic email settings
else:
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'nyangiassetsmarketplace.co.tz')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 465))
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'sales@nyangiassetsmarketplace.co.tz')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() == 'true'

# Define default from email based on the host user
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# Password Reset Settings
PASSWORD_RESET_TIMEOUT = 86400  # 24 hours in seconds
